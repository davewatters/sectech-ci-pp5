from django.db import models
from django.db.models import Sum
from django.contrib.auth.models import User

from customers.models import Customer
from products.models import Product, Vat_rate

class Invoice(models.Model):
    '''
    Defines the invoice header table. Invoice details are in
    the invoice line item table - one record for each product bought.
    '''
    number = models.CharField(max_length=32, editable=False)
    customer = models.ForeignKey(Customer,
                                 on_delete=models.PROTECT,
                                 related_name='invoices')
    date = models.DateTimeField(auto_now_add=True)
    cust_ref = models.CharField(max_length=16, null=True, blank=True)
    total_cost = models.DecimalField(max_digits=8, decimal_places=2,
                                     default=0.0)
    vat_amt = models.DecimalField(max_digits=8, decimal_places=2,
                                  default=0.0)
    grand_total = models.DecimalField(max_digits=8, decimal_places=2,
                                     default=0.0)
    payment_id = models.CharField(max_length=255, null=False,
                                  blank=False, default='')

    def _generate_invoice_number(self):
        '''
        When a new invoice is created we need a unique human-readable sales
        invoice reference number to correlate with our accounting practices
        for ease of cross-referencing. Hook post_save to access the
        Autofield invoice.id
        Format:  SIW0000001 : SI - type, Sales Invoice; W - generated by
        Web shop sale. Followed by a zero-padded seven-digit
        representation of invoice.id
        related: checkout.signals.save_inv_number()
        '''
        return f'SIW{str(self.id).zfill(7)}'

    def update_totals(self):
        '''
        Update total_cost, total vat_amt & grand_total each time
        a new line item is added to the invoice.
        '''
        self.total_cost = self.lineitems.aggregate(
            Sum('net_cost'))['net_cost__sum'] or 0
        self.vat_amt = self.lineitems.aggregate(
            Sum('vat_amt'))['vat_amt__sum'] or 0
        self.grand_total = self.lineitems.aggregate(
            Sum('total_cost'))['total_cost__sum'] or 0
        self.save()

    def __str__(self):
        return f'{self.number}'


class Inv_lineitem(models.Model):
    '''
    Defines the invoice line itmes. Each item must store VAT rate, 
    VAT amount, product price at time of sale. 
    '''
    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE,
                                related_name='lineitems')
    product = models.ForeignKey(Product, on_delete=models.PROTECT,
                                related_name='invoices')
    price = models.DecimalField(max_digits=6, decimal_places=2,
                                default=0.0)
    qty = models.IntegerField(default=0)
    net_cost = models.DecimalField(max_digits=8, decimal_places=2,
                                   default=0.0)
    # vat_code = models.ForeignKey(Vat_rate, on_delete=models.PROTECT,
    #                             related_name='inv_items')
    vat_code = models.CharField(max_length=2, editable=False)
    vat_rate = models.DecimalField(max_digits=4, decimal_places=2, default=0.0)
    vat_amt = models.DecimalField(max_digits=8, decimal_places=2,
                                  default=0.0)
    total_cost = models.DecimalField(max_digits=8, decimal_places=2,
                                     default=0.0)

    def save(self, *args, **kwargs):
        """
        Override the original save method to set the lineitem totals.
        Calculate the line net total and vat based on the product's default 
        """
        prod_vat = Vat_rate.objects.filter(id=self.product.def_vat_rate.id)
        self.vat_code = prod_vat[0].id
        self.vat_rate = prod_vat[0].rate
        self.price = self.product.sell_price
        self.net_cost = self.price * self.qty
        self.vat_amt = self.net_cost * (self.vat_rate/100)
        self.total_cost = self.net_cost + self.vat_amt
        super().save(*args, **kwargs)

    def __str__(self):
        return f'{self.product.desc} on invoice {self.invoice.number}'
